{"version":3,"sources":["components/todolist-component.js","App.js","serviceWorker.js","index.js"],"names":["TodoListComponent","onSubmit","event","preventDefault","setState","task","name","complete","date","id","generateShortGuid","taskList","state","setItems","onChange","target","value","Date","storagedItems","localStorage","getItem","obj","JSON","parse","console","log","length","getItems","filterEnabled","setTimeout","setItem","stringify","firstPart","Math","random","secondPart","toString","slice","this","map","index","renderTask","changeFilter","taskIndex","t","className","Intl","DateTimeFormat","year","month","day","format","onClick","e","originalTaskList","icon","faCheckCircle","faCircle","setIcon","returnList","filter","faTimesCircle","header","faTasks","filterItems","faFilter","tasks","generateList","addTasks","required","faPlus","body","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a79abfd7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './todolist.css';\r\nimport './add-task.css';\r\nimport './task.css';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTasks, faPlus, faFilter } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCircle, faCheckCircle, faTimesCircle } from '@fortawesome/free-regular-svg-icons';\r\n\r\n// import TaskListComponent from './task-list-component';\r\nclass TodoListComponent extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        function getItems() {\r\n            let storagedItems = localStorage.getItem('todolist-tasks');\r\n            let obj = JSON.parse(storagedItems)\r\n            console.log(obj);\r\n            if (obj && obj.length > 0) return obj;\r\n            else return [];\r\n        }\r\n\r\n        this.state = {\r\n            task: {\r\n                name: '',\r\n                complete: false,\r\n                date: null,\r\n                id: this.generateShortGuid()\r\n            },\r\n            taskList: getItems(),\r\n            filterEnabled: false\r\n        };\r\n    }\r\n\r\n    setItems() {\r\n        setTimeout(() => {\r\n            localStorage.setItem('todolist-tasks', JSON.stringify(this.state.taskList));\r\n        }, 100)\r\n    }\r\n\r\n    generateShortGuid() {\r\n        // I generate the UID from two parts here \r\n        // to ensure the random number provide enough bits.\r\n        var firstPart = (Math.random() * 46656) | 0;\r\n        var secondPart = (Math.random() * 46656) | 0;\r\n        firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\r\n        secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\r\n        return firstPart + secondPart;\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            task: {\r\n                name: '',\r\n                complete: false,\r\n                date: null,\r\n                id: this.generateShortGuid()\r\n            },\r\n            taskList: [...this.state.taskList, this.state.task]\r\n        });\r\n        this.setItems();\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({\r\n            task: {\r\n                name: event.target.value,\r\n                complete: false,\r\n                date: new Date(),\r\n                id: this.generateShortGuid()\r\n            }\r\n        });\r\n    }\r\n\r\n    generateList() {\r\n        const taskList = this.state.taskList.map((task, index) =>\r\n            // if (task.complete == false)\r\n            this.renderTask(task, index)\r\n        );\r\n\r\n        return taskList;\r\n    }\r\n\r\n    filterItems() {\r\n        let changeFilter = !this.state.filterEnabled;\r\n        this.setState({\r\n            filterEnabled: changeFilter\r\n        });\r\n    }\r\n\r\n    renderTask(task, taskIndex) {\r\n        let t = this;\r\n        function setIcon(complete) {\r\n            if (complete) {\r\n                return <FontAwesomeIcon icon={faCheckCircle} className=\"complete\" />\r\n            }\r\n            else {\r\n                return <FontAwesomeIcon icon={faCircle} />\r\n            }\r\n        }\r\n\r\n        function setState(complete) {\r\n            if (complete) {\r\n                return 'task complete'\r\n            }\r\n            else {\r\n                return 'task'\r\n            }\r\n        }\r\n\r\n        function compeleteTask(e) {\r\n            e.preventDefault();\r\n            let originalTaskList = t.state.taskList;\r\n            originalTaskList[taskIndex].complete = !originalTaskList[taskIndex].complete;\r\n\r\n            t.setState({\r\n                taskList: originalTaskList\r\n            });\r\n            t.setItems();\r\n        }\r\n\r\n        function removeTask(e) {\r\n            e.preventDefault();\r\n            let originalTaskList = t.state.taskList;\r\n            let returnList = originalTaskList.filter(t => t.id !== task.id);\r\n            t.setState({\r\n                taskList: returnList\r\n            });\r\n            t.setItems();\r\n        }\r\n\r\n        if (this.state.filterEnabled ? this.state.taskList[taskIndex].complete : true) return (\r\n            <li className={setState(this.state.taskList[taskIndex].complete)}>\r\n                <span className=\"task-date\">\r\n                    {new Intl.DateTimeFormat('en-GB', {\r\n                        year: 'numeric',\r\n                        month: 'long',\r\n                        day: '2-digit',\r\n                    }).format(new Date(this.state.taskList[taskIndex].date))}\r\n                </span>\r\n                <button className=\"task-button\" onClick={compeleteTask}>\r\n                    {setIcon(this.state.taskList[taskIndex].complete)}\r\n                </button>\r\n                <p className=\"task-name\">{this.state.taskList[taskIndex].name}</p>\r\n                <button className=\"task-button warn\" onClick={removeTask}>\r\n                    <FontAwesomeIcon icon={faTimesCircle} />\r\n                </button>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let t = this;\r\n\r\n        function filterTasks(e) {\r\n            e.preventDefault();\r\n            t.filterItems();\r\n        }\r\n\r\n        let header = (\r\n            <header className=\"window-header\">\r\n                <h1 className=\"window-header-name\">\r\n                    <FontAwesomeIcon className=\"window-header-icon\" icon={faTasks} />\r\n                    Todo List ({this.state.taskList.length})\r\n              </h1>\r\n                <button onClick={filterTasks} className={this.state.filterEnabled ? \"window-header-button enabled\" : \"window-header-button\"} >\r\n                    <FontAwesomeIcon className=\"window-header-icon\" icon={faFilter} />\r\n                    Only completed\r\n                    </button>\r\n            </header>\r\n        );\r\n        let tasks = (\r\n            <div className=\"tasks\">\r\n                <ul>{this.generateList()}</ul>\r\n            </div>\r\n        );\r\n        let addTasks = (\r\n            <form className=\"add-task\" onSubmit={this.onSubmit}>\r\n                <input required className=\"add-task-input\" value={this.state.task.name} onChange={this.onChange}></input>\r\n                <button className=\"add-task-button\">\r\n                    <FontAwesomeIcon icon={faPlus} />\r\n                </button>\r\n            </form>\r\n        );\r\n\r\n        let body = (\r\n            <main className=\"window-body\">\r\n                {tasks}\r\n                {addTasks}\r\n            </main>\r\n        );\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <section className=\"window\">\r\n                    {header}\r\n                    {body}\r\n                </section>\r\n            </div>\r\n        );\r\n\r\n    }\r\n};\r\n\r\n\r\nexport default TodoListComponent;","import React from 'react';\r\nimport './App.css';\r\nimport TodoListComponent from './components/todolist-component';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n      <TodoListComponent/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './reset.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}